// keyboard/keyboard.go

package keyboard

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/net22sky/telegram-bot/db"
	"log"
)

// Note –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
// –≠—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
type Note struct {
	ID   int    `db:"id"`   // ID –∑–∞–º–µ—Ç–∫–∏
	Text string `db:"text"` // –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
}

// StartKeyboard —Å–æ–∑–¥–∞–µ—Ç Inline Keyboard –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
func StartKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–º–µ—Ç–∫–∏", "notes_menu"),    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "reminders_menu"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
		),
		tgbotapi.NewInlineKeyboardRow(
		 // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–º–æ—â—å", "help"),               // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
		),
	)
}

func NotesKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "add_note"),    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "deletes_note"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫", "view_notes"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–º–æ—â—å", "help"),               // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
		),
	)
}

func RemindersKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "add_reminders"),    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "deletes_reminders"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "view_reminders"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–º–æ—â—å", "help"),               // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
		),
	)
}


// DeleteNotesKeyboard —Å–æ–∑–¥–∞–µ—Ç Inline Keyboard –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - notes []db.Note: –°—Ä–µ–∑ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏.
func DeleteNotesKeyboard(notes []db.Note) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
	for _, note := range notes {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%d. %s", note.ID, note.Text), fmt.Sprintf("delete_%d", note.ID)),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// LanguageKeyboard —Å–æ–∑–¥–∞–µ—Ç Inline Keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
func LanguageKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "set_language_ru"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
			tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "set_language_en"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		),
	)
}

// SettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç Inline Keyboard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
func SettingsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫", "choose_language"),           // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", "choose_timezone"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel"), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		),
	)
}

// CreateNumberKeyboard —Å–æ–∑–¥–∞–µ—Ç Reply Keyboard —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - start int: –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
// - end int: –ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ.
// - rowSize int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
func CreateNumberKeyboard(start, end, rowSize int) tgbotapi.ReplyKeyboardMarkup {
	var keyboard [][]tgbotapi.KeyboardButton

	// –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫
	for i := start; i <= end; i += rowSize {
		var row []tgbotapi.KeyboardButton

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
		for j := i; j < i+rowSize && j <= end; j++ {
			row = append(row, tgbotapi.NewKeyboardButton(fmt.Sprintf("%d", j))) // –ß–∏—Å–ª–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
		}

		keyboard = append(keyboard, row) // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	}

	return tgbotapi.NewReplyKeyboard(keyboard...) // –°–æ–∑–¥–∞–µ–º Reply Keyboard
}

// CreateMonthKeyboard —Å–æ–∑–¥–∞–µ—Ç Reply Keyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ—Å—è—Ü–µ–≤.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - months []string: –°—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - tgbotapi.ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ—Å—è—Ü–µ–≤.
func CreateMonthKeyboard(months []string) tgbotapi.ReplyKeyboardMarkup {
	var keyboard [][]tgbotapi.KeyboardButton

	// –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –ø–æ 4 –º–µ—Å—è—Ü–∞ –≤ –∫–∞–∂–¥–æ–º
	for i := 0; i < len(months); i += 4 {
		end := i + 4
		if end > len(months) {
			end = len(months)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		row := make([]tgbotapi.KeyboardButton, 0)
		for _, month := range months[i:end] {
			row = append(row, tgbotapi.NewKeyboardButton(month)) // –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
		}

		keyboard = append(keyboard, row) // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	}

	return tgbotapi.NewReplyKeyboard(keyboard...) // –°–æ–∑–¥–∞–µ–º Reply Keyboard
}

// RemoveReplyKeyboard —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é Reply Keyboard.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
//   - chatID: ID —á–∞—Ç–∞.
//   - text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
func RemoveReplyKeyboard(bot *tgbotapi.BotAPI, chatID int64, text string) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v", err)
	}
}

func ConfirmationKeyboard() tgbotapi.ReplyKeyboardMarkup {
    keyboard := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
            tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
        ),
    )
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä ResizeKeyboard
keyboard.ResizeKeyboard = true

	return keyboard
}

func ReminderTypesKeyboard() tgbotapi.ReplyKeyboardMarkup {
    keyboard := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
            tgbotapi.NewKeyboardButton("Credit"),
            tgbotapi.NewKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
        ),
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä ResizeKeyboard
    keyboard.ResizeKeyboard = true

    return keyboard
}